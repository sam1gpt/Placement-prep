uses dijistkara with min heap in pair of diff and row and col
we do the minh stuff check for neighbouring and 
we see newEffort as max diff between earlier diff and diff b/w current row and col and neighbouring ones 
if so dist[nrow][ncol]= new effort and we push it into the min heap
when taking row and col by doing it.second.first and it.second.second
if row==n-1 && col== m-1 we return he diff

code:
class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        priority_queue< pair<int, pair<int,int>>,
        vector<pair<int, pair<int,int>>>,
        greater<pair<int, pair<int,int>>>> minh;
        int n= heights.size();
        int m= heights[0].size();
        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        dist[0][0]=0;
        minh.push({0, {0,0}});
        int delrow[]= {-1, 0, 1, 0};
        int delcol[]= {0,1,0,-1};
        while(!minh.empty()){
            auto it= minh.top();
            minh.pop();
            int diff= it.first;
            int r= it.second.first;
            int c= it.second.second;
            if(r== n-1 && c==m-1) return diff;
            for(int i=0;i<4;i++){
                int nrow= r+ delrow[i];
                int ncol= c+ delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    int newEffort= max(abs(heights[r][c]- 
                    heights[nrow][ncol]), diff);
                    if(newEffort< dist[nrow][ncol]){
                        dist[nrow][ncol]= newEffort;
                        minh.push({dist[nrow][ncol], {nrow,ncol}});
                    }
                }
            } 

        }
       return 0;
    }
};
